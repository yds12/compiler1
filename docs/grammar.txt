STATEMENT := STATEMENT ;
           | IF_STATEMENT
           | ASSIGNMENT
           | RET_STATEMENT
           | FUNCTION_CALL
           | WHILE_STATEMENT
           | LOOP_STATEMENT
           | FOR_STATEMENT
           | MATCH_STATEMENT
           | VAR_DECL

RET_STATEMENT := return EXPRESSION

BLOCK := STATEMENT | { STATEMENTS }

STATEMENTS := STATEMENT | STATEMENT ; STATEMENTS

IF_STATEMENT := if CONDITION : BLOCK
              | if CONDITION : BLOCK else BLOCK

ASSIGNMENT := IDENTIFIER = EXPRESSION

MATCH_STATEMENT := match EXPRESSION { MATCH_CLAUSES }

MATCH_CLAUSES := MATCH_CLAUSE ; MATCH_CLAUSES

MATCH_CLAUSE := MATCH_CLAUSE ;
              | EXPRESSION : BLOCK

LOOP_STATEMENT := loop BLOCK

WHILE_STATEMENT := while CONDITION : BLOCK

FOR_STATEMENT := for FOR_DECL , CONDITION , BLOCK : BLOCK

FOR_DECL := VAR_DECL
          | VAR_DECL ; FOR_DECL

CONDITION := EXPRESSION LOGICAL_OP EXPRESSION
           | not EXPRESSION

EXPRESSION := LITERAL
            | IDENTIFIER
            | CONDITION
            | FUNCTION_CALL
            | EXPRESSION OP EXPRESSION
            | ( EXPRESSION )

VAR_DECL := TYPE IDENTIFIER
          | TYPE IDENTIFIER = EXPRESSION

FUNCTION_DECL := fn IDENTIFIER PARAMS : BLOCK

PARAMS := PARAM , PARAMS

PARAM := IDENTIFIER
       | TYPE IDENTIFIER

TYPE := int | string | float | bool

FUNCTION_CALL := IDENTIFIER CALL_PARAMS

CALL_PARAMS := EXPRESSION , CALL_PARAMS

